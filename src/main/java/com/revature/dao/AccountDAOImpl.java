package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditAccountDTO;
import com.revature.dto.AddOrEditClientDTO;
import com.revature.model.Account;
import com.revature.model.Account;
import com.revature.model.Account;
import com.revature.until.ConnectionUtility;

public class AccountDAOImpl implements AccountDAO {

	@Override
	public List<Account> getAllAccountsFromClient(int clientId) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM texas_bank.account WHERE client_id = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				String type_of_account = rs.getString("type_of_account");
				int account_balance = rs.getInt("account_balance");
				int client_id = rs.getInt("client_id");

				Account a = new Account(id, type_of_account, account_balance, client_id);
				accounts.add(a);
			}
			return accounts;
		}

	}

	@Override

	public List<Account> getAccountsBetween(int clientId, int lessThan, int greaterThan) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM texas_bank.account WHERE client_id = ? AND account_balance <= ? AND account_balance >= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, lessThan);
			pstmt.setInt(3, greaterThan);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				String type_of_account = rs.getString("type_of_account");
				int account_balance = rs.getInt("account_balance");

				Account p = new Account(id, type_of_account, account_balance, clientId);
				accounts.add(p);
			}

			return accounts;
		}
	}

	@Override

	public List<Account> getAccountsLessThan(int clientId, int lessThan) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM texas_bank.account  WHERE client_id = ? AND account_balance <= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, lessThan);
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				String type_of_account = rs.getString("type_of_account");
				int account_balance = rs.getInt("account_balance");

				Account p = new Account(id, type_of_account, account_balance, clientId);
				accounts.add(p);
			}

			return accounts;
		}
	}

	@Override

	public List<Account> getAccountsGreaterThan(int clientId, int greaterThan) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM texas_bank.account  WHERE client_id = ? AND account_balance >= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, greaterThan);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				String type_of_account = rs.getString("type_of_account");
				int account_balance = rs.getInt("account_balance");

				Account p = new Account(id, type_of_account, account_balance, clientId);
				accounts.add(p);
			}

			return accounts;
		}
	}

	@Override

	public Account addAccount(AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			String sql = "INSERT INTO texas_bank.account(type_of_account,account_balance,client_id) VALUES(?,?,?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

			pstmt.setString(1, account.getType_of_account());
			pstmt.setInt(2, account.getAccount_balance());
			pstmt.setInt(3, account.getClient_id());

			int recordsUpdated = pstmt.executeUpdate();

			if (recordsUpdated != 1) {
				throw new SQLException("Could not insert a client record");
			}
			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Account createdAccount = new Account(generatedKeys.getInt(1), account.getType_of_account(),
						account.getAccount_balance(), account.getClient_id());

				return createdAccount;
			} else {
				throw new SQLException("Autogenerated id could not be obtained for Client");
			}
		}
	}

	@Override

	public Account editAccount(int clientId, int id, AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "UPDATE texas_bank.account SET  account_balance = ? WHERE client_id = ? AND id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, account.getAccount_balance());
			pstmt.setInt(2, clientId);
			pstmt.setInt(3, id);

			int recordsUpdated = pstmt.executeUpdate();
			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated");
			}

			return new Account(clientId, account.getType_of_account(), account.getAccount_balance(),
					account.getClient_id());
		}
	}

	@Override

	public void deleteAccount(int clientId, int id) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "DELETE FROM texas_bank.account WHERE client_id = ? AND id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, clientId);
			pstmt.setInt(2, id);

			int recordsDeleted = pstmt.executeUpdate();

			if (recordsDeleted != 1) {
				throw new SQLException("Record was not able to be deleted");
			}
		}

	}

	@Override

	public Account getAccountById(int clientId, int id) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			String sql = "SELECT * FROM texas_bank.account WHERE client_id = ? AND id = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, id);

			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				// int id = rs.getInt("id");
				String name = rs.getString("type_of_account");
				int balance = rs.getInt("account_balance");
				int client_Id = rs.getInt("client_id");

				Account account = new Account(id, name, balance, client_Id);

				return account;
			} else {
				return null;
			}

		}
	}
}
